[
	{
		"name": "compare",
		"purpose": "Compare an object to another of the same type",
		"engine_use": "Called by default by boolean operators like <tt>&lt;</tt> and <tt>==</tt>.",
		"implementation": "<tt>Object.compare</tt> compares pointer addresses",
		"invariants": "Operands must be of the same type. <tt>a.compare b</tt> must return an Integer less than 0 if <tt>a</tt> is less than <tt>b</tt>, 0 if they are equal, and >0 if <tt>b</tt> is greater than <tt>a</tt>, using a consistent and transitive ordering",
		"side_effects": false
	},
	{
		"name": "getIterator",
		"purpose": "Return an iterator over the object",
		"engine_use": "Called by the <tt>for-in</tt> loop",
		"implementation": "Defined by container classes like <tt>String</tt> and <tt>Hash</tt>",
		"invariants": "Iterators returned by this method must support the <tt>hasNext</tt> and <tt>next</tt> methods (see below). When the object is modified during iteration, it is unspecified whether and how this affects the iterator. However, it should be possible for two iterators to iterate over the same object concurrently, unless the underlying object cannot support multiple iteration (e.g., in a generator). Elements may be returned in any order, and the order need not be consistent.",
		"side_effects": false
	},
	{
		"name": "hasNext",
		"purpose": "Inquire whether an iterator still has elements available",
		"engine_use": "Called by the <tt>for-in</tt> loop",
		"implementation": "Implemented by all Iterator classes",
		"invariants": "Must return a Bool, and must return true as long as <tt>next</tt> return a value, and false when <tt>next</tt> would throw EmptyIterator.",
		"side_effects": false
	},
	{
		"name": "next",
		"purpose": "Get the next element from an iterator",
		"engine_use": "Called by the <tt>for-in</tt> loop",
		"implementation": "Implemented by all Iterator classes",
		"invariants": "Must return all elements in the object on consecutive calls. See also hasNext. Throws an EmptyIterator exception when there are no elements left to iterate over.",
		"side_effects": "Advances the iterator"
	},
	{
		"name": "operator()",
		"purpose": "Calls the object",
		"engine_use": "Called to implement function calls (<tt>a b</tt> or <tt>a(b)</tt> is equivalent to <tt>a.operator()(b)</tt>",
		"implementation": "Performs a function call for Function objects. The engine does not actually call <tt>Function.operator()</tt> on a function call, but instead calls the underlying C++ function directly.",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator+",
		"purpose": "Add two objects",
		"engine_use": "Called whenever the <tt>+</tt> operator is used",
		"implementation": "Simple addition",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator-",
		"purpose": "Subtract one object from another",
		"engine_use": "Called whenever the <tt>-</tt> operator is used",
		"implementation": "Simple subtraction",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator%",
		"purpose": "Take one object modulo another",
		"engine_use": "Called whenever the <tt>%</tt> operator is used",
		"implementation": "Simple modulo",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator/",
		"purpose": "Divide one object by another",
		"engine_use": "Called whenever the <tt>/</tt> operator is used",
		"implementation": "Simple division",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator*",
		"purpose": "Multiply two objects",
		"engine_use": "Called whenever the <tt>*</tt> operator is used",
		"implementation": "Simple multiplication",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator&lt;&lt;",
		"purpose": "Left-shift one object by another",
		"engine_use": "Called whenever the <tt>&lt;&lt;</tt> operator is used",
		"implementation": "Simple left-shift",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator&gt;&gt;",
		"purpose": "Right-shift one object by another",
		"engine_use": "Called whenever the <tt>&gt;&gt;</tt> operator is used",
		"implementation": "Simple right-shift",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator&",
		"purpose": "Take the binary AND of two objects",
		"engine_use": "Called whenever the <tt>&</tt> operator is used",
		"implementation": "Simple binary AND",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator|",
		"purpose": "Take the binary OR of two objects",
		"engine_use": "Called whenever the <tt>|</tt> operator is used",
		"implementation": "Simple binary OR",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator^",
		"purpose": "Take the binary XOR of two objects",
		"engine_use": "Called whenever the <tt>^</tt> operator is used",
		"implementation": "Simple binary XOR",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator~",
		"purpose": "Take the bitwise complement of an object",
		"engine_use": "Called whenever the <tt>~</tt> operator is used",
		"implementation": "Simple bitwise complement",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator!",
		"purpose": "Take the logical negation of an object",
		"engine_use": "Called whenever the <tt>!</tt> operator is used",
		"implementation": "Simple logical negation",
		"invariants": "&mdash;",
		"side_effects": false
	},
	{
		"name": "operator<, operator<=, operator==, operator!=, operator>, operator>=",
		"purpose": "Compare two objects",
		"engine_use": "Called whenever the equivalent operators are used.",
		"implementation": "By default, these methods all call <tt>operator&lt;=&gt;</tt>.",
		"invariants": "Must return a Bool and present a consistent, transitive ordering",
		"side_effects": false
	},
	{
		"name": "operator<=>",
		"purpose": "Compare two objects",
		"engine_use": "Called whenever the <tt>&lt;=&gt;</tt> operator is used, and by default by several other operators",
		"implementation": "If the types of the two objects are equal, calls the <tt>compare</tt> method to compare them, otherwise compares the types.",
		"invariants": "As under <tt>compare</tt>",
		"side_effects": false
	},
	{
		"name": "operator->",
		"purpose": "Access a member of a container object",
		"engine_use": "Called whenever the <tt>-&gt;</tt> operator is used, and in compound assignments (for example, <tt>a, b = c</tt> is equivalent to <tt>a = c->0; b = c->1</tt>)",
		"implementation": "Used to access members in classes for which that makes sense (e.g., <tt>Hash</tt>, <tt>Tuple</tt>)",
		"invariants": "Must return the same value for the same argument until another method is called on the object.",
		"side_effects": "May not always return same value. No side-effects."
	},
	{
		"name": "operator->=",
		"purpose": "Set a member of a container object",
		"engine_use": "Called for assignment with <tt>-&gt;</tt> (<tt>a->b = c</tt> is equivalent to <tt>a.operator-&gt;=(b, c)</tt>",
		"implementation": "Implemented in those container classes that allow member assignment (e.g., <tt>Hash</tt> and <tt>Array</tt>)",
		"invariants": "After a call to this method, a subsequent call to <tt>operator-&gt;</tt> with the same argument must return the value set until another method is called on the object",
		"side_effects": false
	},
	{
		"name": "toBool",
		"purpose": "Convert a value into a boolean",
		"engine_use": "<tt>if</tt> and <tt>while</tt>; boolean operators",
		"implementation": "Core classes return <tt>true</tt> for non-'empty' values",
		"invariants": "Must return a Bool",
		"side_effects": false
	},
	{
		"name": "toString",
		"purpose": "Convert a value into a string",
		"engine_use": "<tt>echo</tt> method; interactive loop; string concatenation",
		"implementation": "<tt>Object.toString</tt> returns object address",
		"invariants": "Must return a String",
		"side_effects": false
	},
	{
		"name": "toArray, toFloat, toRange, toTuple",
		"purpose": "Convert a value to the specified type",
		"engine_use": "Used only peripherally by the engine (e.g., the Tuple constructor calls toTuple on its argument)",
		"implementation": "Implemented by several core classes",
		"invariants": "Must return an object of the specified type",
		"side_effects": false
	}
]