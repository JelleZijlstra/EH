The files in this directory provide a parser as well as a compiler and 
interpreter for the EH scripting language. The parser provided here includes 
numerous features not supported by the PHP-based interpreter and supports 
virtually all features found in that implementation. This interpreter has
evolved considerably since the PHP implementation was created and implements a
far more full-featured language.

The following are some bugs and missing features still existing in the 
interpreter:
- When compiled with Clang++, exceptions thrown by eh_error don't get caught. 
  Whether this is because I'm misusing exceptions or because of a Clang++ bug 
  I'm not sure. The same or a similar issue arises with g++ 4.5. The exceptions 
  are getting caught only with Apple's versions of g++ 4.0 and 4.2---did Apple
  introduce some specific patches there to enable exception handling on Mac OS X 
  10.5? In fact, it also works with Clang++ 3.1, though not with 2.9.
- Make ehretval_t objects fully read-only.
- Make inheritance more meaningful. I would like to be able to do something like
	class MyClass {
		super = inherit BaseClass
		foo = func: {
			if someCondition {
				super.foo()
			}
		}
	}
  where inherit is an Object method. This would make the current class an
  instance of BaseClass, and allow direct calls of non-overridden BaseClass
  methods.
  More broadly, we should be able to instantiate a class without literally
  copying over all the functions. That could be done by including in an object
  a reference to a "parent" (a non-instantiated class, or a superclass) that
  is used to search for members. We would only set members in the object itself
  if and when they are set to something different than the situation in the
  parent object.
  In order for this to work with functions, we'll need a more robust concept
  of the "current object" (like the this pointer in JS) and of bindings.
- Introduce enums.
- Store some types of objects directly in ehretval_p objects, instead of
  requiring a pointer.

To compile the interpreter (ehi), write:
$ make ehi

To use the compiler (ehc) instead, write:
$ make ehc

And for the ehphp PHP extension:
$ make ehphp

To compile and run a file called "compile.eh" with ehc:
$ meh compile
$ ./compile

Other things to do:
- Create a GeSHi spec for EH; see 
  http://qbnz.com/highlighter/geshi-doc.html#language-file-example

As of July 2012, the ehi interpreter is fully garbage collected using a
combination of reference-counting smart pointers (refcount_ptr.h) and a 
reachability-based garbage collector (eh_gc.h). I am aware of one remaining 
source of memory leaks: when the parser encounters a parsing error, it fails to
deallocate some structures used in parsing the rest of the line. I have not been 
able to come up with a fix for this issue; however, the leaks are small and 
occur only with programs that have errors anyway.
