%%stdout%%
func: ()
	match this
		case Nil
			Nil
		case Cons (_, Nil)
			this
		case Cons (@hd, @tl)
			private const l, r = this.split (Nil, Nil)
			l.sort ().merge (r.sort ())
	end
end
func: f
	match this
		case Nil
			Nil
		case Cons (@hd, @tl)
			Cons (f hd, tl.map f)
	end
end
func: f
	this.reduce (Nil, (func: base, val
		match (f val)
			case true
				base.operator+(1)
			case false
				base
		end
	end))
end
func: n
	match this
		case Cons (@hd, @tl)
			match n
				case 0
					hd
				case 1
					tl
				case _
					throw (ArgumentError ("Argument must be 0 or 1", "List.operator->", n))
			end
	end
end
%%stderr%%
