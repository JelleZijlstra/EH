%%stdout%%
func: ()
	out = "("
	len = this.length ()
	for i in len
		out = out.operator+(this->i)
		if i.operator!=(len.operator-(1))
			out = out.operator+(", ")
		end
	end
	out.operator+(")")
end
func: n
	if n.operator<(0)
		throw ArgumentError.new ("Argument must be nonnegative", "Iterable.nth", n)
	end
	const private it = this.getIterator ()
	private i = 0
	while true
		elt = it.next ()
		if i.operator==(n)
			ret elt
		end
		i = i.operator+(1)
	end
end
func: f
	out = []
	for value in this
		if f value
			out.push value
		end
	end
	out
end
func: ()
	[3, 2, 1], {foo: "bar"}
end
func: ()
	private it = this.hash.getIterator ()
	out = "{"
	while (it.hasNext ())
		elt, () = it.next ()
		out = out.operator+(elt)
		if (it.hasNext ())
			out = out.operator+(", ")
		end
	end
	out.operator+("}")
end
func: list
	const private n = list.length ()
	const private sum = list.numericSum ()
	const private mean = sum.operator/(n)
	const private diffs = list.map (func: x
		(x.operator-(mean)).operator*((x.operator-(mean)))
	end)
	(diffs.numericSum ().operator/((n.operator-(1)))).sqrt ()
end
func: list
	const private length = list.length ()
	const private half = length.operator/(2)
	const private sorted = list.sort ()
	if length.operator%(2).operator==(0)
		mean (list.nth (half.operator-(1)), list.nth half)
	else
		list.nth half
	end
end
func: ()
	class Foo
		public foo = func: ()
			42
		end
	end
end
func: ()
	$test --"foo"=3 --"bar"=true -"adf"=true -"kjkl"={foo: "baz"}

end
func: f
	try
		f ()
	catch
		echo exception
	end
end
func: ()
	try
		echo 42
	catch if "the world".operator==("coming to an end")
		echo "Oh no!"
	catch
		echo "Need to put something here"
	finally
		echo "Even this won't happen"
	end
end
%%stderr%%
