%%stdout%%
@object <GlobalObject> [
	ArgumentError <public,non-static,constant>: @object <ArgumentError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	Array <public,non-static,constant>: @object <Array> [
		Iterator <public,non-static,non-constant>: @object <Array.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
		]
		compare <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		has <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		length <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		operator->= <public,non-static,non-constant>: @function <library>: 
		toArray <public,non-static,non-constant>: @function <library>: 
		toTuple <public,non-static,non-constant>: @function <library>: 
	]
	Attribute <public,non-static,constant>: @object <Attribute> [
		constAttribute <public,non-static,constant>: @enum instance constAttribute <Attribute> [
		]
		privateAttribute <public,non-static,constant>: @enum instance privateAttribute <Attribute> [
		]
		publicAttribute <public,non-static,constant>: @enum instance publicAttribute <Attribute> [
		]
		staticAttribute <public,non-static,constant>: @enum instance staticAttribute <Attribute> [
		]
	]
	Binding <public,non-static,constant>: @object <Binding> [
		bindTo <public,non-static,non-constant>: @function <library>: 
		decompile <public,non-static,non-constant>: @function <library>: 
		new <public,non-static,non-constant>: @function <library>: 
		operator() <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	Bool <public,non-static,constant>: @object <Bool> [
		compare <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		operator! <public,non-static,non-constant>: @function <library>: 
		toBool <public,non-static,non-constant>: @function <library>: 
		toInteger <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	ConstError <public,non-static,constant>: @object <ConstError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	EmptyIterator <public,non-static,constant>: @object <EmptyIterator> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	Enum <public,non-static,constant>: @object <Enum> [
		compare <public,non-static,non-constant>: @function <library>: 
		isConstructor <public,non-static,non-constant>: @function <library>: 
		map <public,non-static,non-constant>: @function <library>: 
		new <public,non-static,non-constant>: @function <library>: 
		operator() <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
		type <public,non-static,non-constant>: @function <library>: 
		typeId <public,non-static,non-constant>: @function <library>: 
	]
	Exception <public,non-static,constant>: @object <Exception> [
		initialize <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	File <public,non-static,constant>: @object <File> [
		close <public,non-static,non-constant>: @function <library>: 
		finalize <public,non-static,non-constant>: @function <library>: 
		getc <public,non-static,non-constant>: @function <library>: 
		gets <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		isOpen <public,non-static,non-constant>: @function <library>: 
		open <public,non-static,non-constant>: @function <library>: 
		puts <public,non-static,non-constant>: @function <library>: 
		readFile <public,non-static,non-constant>: @function <library>: 
	]
	FixedArray <public,non-static,constant>: @object <FixedArray> [
		initialize <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		operator->= <public,non-static,non-constant>: @function <library>: 
		size <public,non-static,non-constant>: @function <library>: 
	]
	Float <public,non-static,constant>: @object <Float> [
		abs <public,non-static,non-constant>: @function <library>: 
		compare <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		operator* <public,non-static,non-constant>: @function <library>: 
		operator+ <public,non-static,non-constant>: @function <library>: 
		operator- <public,non-static,non-constant>: @function <library>: 
		operator/ <public,non-static,non-constant>: @function <library>: 
		sqrt <public,non-static,non-constant>: @function <library>: 
		toBool <public,non-static,non-constant>: @function <library>: 
		toFloat <public,non-static,non-constant>: @function <library>: 
		toInteger <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	Function <public,non-static,constant>: @object <Function> [
		bindTo <public,non-static,non-constant>: @function <library>: 
		decompile <public,non-static,non-constant>: @function <library>: 
		operator() <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	GarbageCollector <public,non-static,constant>: @object <GarbageCollector> [
		run <public,non-static,non-constant>: @function <library>: 
		stats <public,non-static,non-constant>: @function <library>: 
	]
	GlobalObject <public,non-static,constant>: (recursion)
	Hash <public,non-static,constant>: @object <Hash> [
		Iterator <public,non-static,non-constant>: @object <Hash.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
		]
		compare <public,non-static,non-constant>: @function <library>: 
		delete <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		has <public,non-static,non-constant>: @function <library>: 
		keys <public,non-static,non-constant>: @function <library>: 
		length <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		operator->= <public,non-static,non-constant>: @function <library>: 
		toArray <public,non-static,non-constant>: @function <library>: 
	]
	Integer <public,non-static,constant>: @object <Integer> [
		Iterator <public,non-static,non-constant>: @object <Integer.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
		]
		abs <public,non-static,non-constant>: @function <library>: 
		compare <public,non-static,non-constant>: @function <library>: 
		getBit <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		length <public,non-static,non-constant>: @function <library>: 
		operator% <public,non-static,non-constant>: @function <library>: 
		operator& <public,non-static,non-constant>: @function <library>: 
		operator* <public,non-static,non-constant>: @function <library>: 
		operator+ <public,non-static,non-constant>: @function <library>: 
		operator- <public,non-static,non-constant>: @function <library>: 
		operator/ <public,non-static,non-constant>: @function <library>: 
		operator<< <public,non-static,non-constant>: @function <library>: 
		operator>> <public,non-static,non-constant>: @function <library>: 
		operator^ <public,non-static,non-constant>: @function <library>: 
		operator_uminus <public,non-static,non-constant>: @function <library>: 
		operator| <public,non-static,non-constant>: @function <library>: 
		operator~ <public,non-static,non-constant>: @function <library>: 
		setBit <public,non-static,non-constant>: @function <library>: 
		sqrt <public,non-static,non-constant>: @function <library>: 
		toBool <public,non-static,non-constant>: @function <library>: 
		toChar <public,non-static,non-constant>: @function <library>: 
		toFloat <public,non-static,non-constant>: @function <library>: 
		toInt <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	LoopError <public,non-static,constant>: @object <LoopError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	Map <public,non-static,constant>: @object <Map> [
		Iterator <public,non-static,non-constant>: @object <Map.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
			peek <public,non-static,non-constant>: @function <library>: 
		]
		compare <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		has <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		operator->= <public,non-static,non-constant>: @function <library>: 
		size <public,non-static,non-constant>: @function <library>: 
	]
	MiscellaneousError <public,non-static,constant>: @object <MiscellaneousError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	NameError <public,non-static,constant>: @object <NameError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	Node <public,non-static,constant>: @object <Node> [
		T_ACCESS <public,non-static,constant>: @int 319
		T_ADD <public,non-static,constant>: @int 302
		T_AND <public,non-static,constant>: @int 343
		T_ANYTHING <public,non-static,constant>: @int 299
		T_ARRAY_LITERAL <public,non-static,constant>: @int 316
		T_ARRAY_MEMBER <public,non-static,constant>: @int 288
		T_ARRAY_MEMBER_NO_KEY <public,non-static,constant>: @int 298
		T_ARROW <public,non-static,constant>: @int 354
		T_ASSIGN <public,non-static,constant>: @int 301
		T_ATTRIBUTE <public,non-static,constant>: @int 287
		T_BINARY_AND <public,non-static,constant>: @int 309
		T_BINARY_COMPLEMENT <public,non-static,constant>: @int 312
		T_BINARY_OR <public,non-static,constant>: @int 310
		T_BINARY_XOR <public,non-static,constant>: @int 311
		T_BREAK <public,non-static,constant>: @int 274
		T_CALL <public,non-static,constant>: @int 318
		T_CALL_METHOD <public,non-static,constant>: @int 290
		T_CASE <public,non-static,constant>: @int 273
		T_CATCH <public,non-static,constant>: @int 285
		T_CATCH_IF <public,non-static,constant>: @int 292
		T_CLASS <public,non-static,constant>: @int 281
		T_CLASS_MEMBER <public,non-static,constant>: @int 282
		T_COMMA <public,non-static,constant>: @int 315
		T_COMMAND <public,non-static,constant>: @int 321
		T_COMPARE <public,non-static,constant>: @int 344
		T_CONTINUE <public,non-static,constant>: @int 275
		T_CUSTOMOP <public,non-static,constant>: @int 326
		T_DEFAULT <public,non-static,constant>: @int 272
		T_DIVIDE <public,non-static,constant>: @int 305
		T_DOUBLEARROW <public,non-static,constant>: @int 289
		T_ELSE <public,non-static,constant>: @int 262
		T_ELSIF <public,non-static,constant>: @int 263
		T_END <public,non-static,constant>: @int 270
		T_ENUM <public,non-static,constant>: @int 280
		T_ENUM_WITH_ARGUMENTS <public,non-static,constant>: @int 297
		T_EQ <public,non-static,constant>: @int 345
		T_FOR <public,non-static,constant>: @int 265
		T_FOR_IN <public,non-static,constant>: @int 293
		T_FUNC <public,non-static,constant>: @int 276
		T_GE <public,non-static,constant>: @int 348
		T_GIVEN <public,non-static,constant>: @int 268
		T_GREATER <public,non-static,constant>: @int 307
		T_GROUPING <public,non-static,constant>: @int 300
		T_HASH_LITERAL <public,non-static,constant>: @int 317
		T_IF <public,non-static,constant>: @int 261
		T_IF_ELSE <public,non-static,constant>: @int 295
		T_LE <public,non-static,constant>: @int 347
		T_LEFTSHIFT <public,non-static,constant>: @int 350
		T_LESSER <public,non-static,constant>: @int 308
		T_LITERAL <public,non-static,constant>: @int 283
		T_LONGPARA <public,non-static,constant>: @int 323
		T_MATCH <public,non-static,constant>: @int 269
		T_MATCH_SET <public,non-static,constant>: @int 314
		T_MODULO <public,non-static,constant>: @int 306
		T_MULTIPLY <public,non-static,constant>: @int 304
		T_NAMED_CLASS <public,non-static,constant>: @int 294
		T_NE <public,non-static,constant>: @int 346
		T_NOT <public,non-static,constant>: @int 313
		T_NULL <public,non-static,constant>: @int 279
		T_NULLARY_ENUM <public,non-static,constant>: @int 296
		T_OR <public,non-static,constant>: @int 342
		T_RANGE <public,non-static,constant>: @int 355
		T_RET <public,non-static,constant>: @int 277
		T_RIGHTSHIFT <public,non-static,constant>: @int 349
		T_SCOPE <public,non-static,constant>: @int 356
		T_SEPARATOR <public,non-static,constant>: @int 278
		T_SHORTPARA <public,non-static,constant>: @int 322
		T_SUBTRACT <public,non-static,constant>: @int 303
		T_SWITCH <public,non-static,constant>: @int 271
		T_THIS <public,non-static,constant>: @int 357
		T_TRY <public,non-static,constant>: @int 284
		T_TRY_FINALLY <public,non-static,constant>: @int 291
		T_VARIABLE <public,non-static,constant>: @int 324
		T_WHILE <public,non-static,constant>: @int 264
		T_XOR <public,non-static,constant>: @int 341
		execute <public,non-static,non-constant>: @function <library>: 
	]
	Null <public,non-static,constant>: @object <Null> [
		initialize <public,non-static,non-constant>: @function <library>: 
		toBool <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	Object <public,non-static,constant>: @object <Object> [
		compare <public,non-static,non-constant>: @function <library>: 
		finalize <public,non-static,non-constant>: @function <library>: 
		inherit <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		isA <public,non-static,non-constant>: @function <library>: 
		members <public,non-static,non-constant>: @function <library>: 
		new <public,non-static,non-constant>: @function <library>: 
		operator!= <public,non-static,non-constant>: @function <library>: 
		operator< <public,non-static,non-constant>: @function <library>: 
		operator<= <public,non-static,non-constant>: @function <library>: 
		operator<=> <public,non-static,non-constant>: @function <library>: 
		operator== <public,non-static,non-constant>: @function <library>: 
		operator> <public,non-static,non-constant>: @function <library>: 
		operator>= <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
		type <public,non-static,non-constant>: @function <library>: 
		typeId <public,non-static,non-constant>: @function <library>: 
	]
	Random <public,non-static,constant>: @object <Random> [
		max <public,static,constant>: @int 2147483647
		rand <public,non-static,non-constant>: @function <library>: 
		srand <public,non-static,non-constant>: @function <library>: 
	]
	Range <public,non-static,constant>: @object <Range> [
		Iterator <public,non-static,non-constant>: @object <Range.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
		]
		compare <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		max <public,non-static,non-constant>: @function <library>: 
		min <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		toArray <public,non-static,non-constant>: @function <library>: 
		toRange <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	String <public,non-static,constant>: @object <String> [
		Iterator <public,non-static,non-constant>: @object <String.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
			peek <public,non-static,non-constant>: @function <library>: 
		]
		charAtPosition <public,non-static,non-constant>: @function <library>: 
		compare <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		length <public,non-static,non-constant>: @function <library>: 
		operator+ <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		toBool <public,non-static,non-constant>: @function <library>: 
		toFloat <public,non-static,non-constant>: @function <library>: 
		toInteger <public,non-static,non-constant>: @function <library>: 
		toRange <public,non-static,non-constant>: @function <library>: 
		toString <public,non-static,non-constant>: @function <library>: 
	]
	SuperClass <public,non-static,constant>: @object <SuperClass> [
		toString <public,non-static,non-constant>: @function <library>: 
	]
	SyntaxError <public,non-static,constant>: @object <SyntaxError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	Tuple <public,non-static,constant>: @object <Tuple> [
		Iterator <public,non-static,non-constant>: @object <Tuple.Iterator> [
			hasNext <public,non-static,non-constant>: @function <library>: 
			initialize <public,non-static,non-constant>: @function <library>: 
			next <public,non-static,non-constant>: @function <library>: 
		]
		compare <public,non-static,non-constant>: @function <library>: 
		getIterator <public,non-static,non-constant>: @function <library>: 
		initialize <public,non-static,non-constant>: @function <library>: 
		length <public,non-static,non-constant>: @function <library>: 
		operator-> <public,non-static,non-constant>: @function <library>: 
		toTuple <public,non-static,non-constant>: @function <library>: 
	]
	TypeError <public,non-static,constant>: @object <TypeError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	UnknownCommandError <public,non-static,constant>: @object <UnknownCommandError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	VisibilityError <public,non-static,constant>: @object <VisibilityError> [
		initialize <public,non-static,non-constant>: @function <library>: 
	]
	argc <public,non-static,non-constant>: @int 1
	argv <public,non-static,non-constant>: @array [
		0 => @string "printglobal.eh"
	]
	collectGarbage <public,non-static,non-constant>: @function <library>: 
	commands <public,non-static,constant>: @hash [
		'echo': @function <library>: 
		'put': @function <library>: 
		'q': @function <library>: 
		'quit': @function <library>: 
	]
	contextName <public,non-static,non-constant>: @function <library>: 
	echo <public,non-static,non-constant>: @function <library>: 
	eval <public,non-static,non-constant>: @function <library>: 
	getinput <public,non-static,non-constant>: @function <library>: 
	global <public,non-static,constant>: (recursion)
	handleUncaught <public,non-static,non-constant>: @function <library>: 
	include <public,non-static,non-constant>: @function <library>: 
	log <public,non-static,non-constant>: @function <library>: 
	pow <public,non-static,non-constant>: @function <library>: 
	printvar <public,non-static,non-constant>: @function <library>: 
	put <public,non-static,non-constant>: @function <library>: 
	shell <public,non-static,non-constant>: @function <library>: 
	throw <public,non-static,non-constant>: @function <library>: 
	toString <public,non-static,non-constant>: @function <library>: 
	workingDir <public,non-static,non-constant>: @function <library>: 
]
%%stderr%%
